Index: src/Program.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\nMain Program Class.\r\n */\r\n\r\n//imports\r\nimport javax.xml.crypto.Data;\r\nimport java.sql.PreparedStatement;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\n\r\npublic class Program\r\n{\r\n    // Method main() which displays the opening menu to the user.\r\n    // The method either calls the existingCustomersMenu() or newCustomersMenu() methods depending on user input.\r\n    public static void main(String[] args) throws SQLException\r\n    {\r\n        System.out.println(\"Welcome to ACME Banking Solutions...\\n\");\r\n        int menu = checkMultipleOptions(\"Does the customer currently have an account with us? \\n1. Yes. \\n2. No. \\n9. Exit.\", new int[]{1, 2, 9});\r\n\r\n        switch (menu)\r\n        {\r\n            case 1 -> existingCustomersMenu();\r\n            case 2 -> newCustomersMenu();\r\n            case 9 -> exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method existingCustomersMenu() which displays a menu to customers who already have an account registered.\r\n    public static void existingCustomersMenu() throws SQLException\r\n    {\r\n        Queries queries = new Queries();\r\n        String accountNumber = checkAccountNumber();\r\n\r\n        while(!queries.checkAccountExists(accountNumber))\r\n        {\r\n            System.out.println(\"No record of account. Try again.\");\r\n            accountNumber = checkAccountNumber();\r\n        }\r\n\r\n        //Retrieve account details.\r\n        System.out.println(\"\\n Retrieving account details...\");\r\n        Account.retrieveCustomerInfo(accountNumber);\r\n\r\n        //Display customer info - NEEDS FIXING TO DISPLAY INDIVIDUAL RESULTS.\r\n        System.out.println(\"\\n Name: \");\r\n        System.out.println(\"\\n D.O.B: \");\r\n\r\n        //Display customers accounts with bank - NEEDS FIXING.\r\n        System.out.println(\"\\n Customer Accounts: \");\r\n\r\n\r\n        //Option to allow current customer to open new account. - NEEDS REMOVING\r\n        PersonalAccount x = new PersonalAccount(\"12312434\", \"090109\", 45.45f, 0.00f, true, true);\r\n        x.accountMenu();\r\n    }\r\n\r\n    // Method newCustomersMenu() which displays a menu to new customers.\r\n    // The method calls the createUser() method and passes its return value to one of the methods which creates a new account, depending on user input.\r\n    public static void newCustomersMenu() throws SQLException\r\n    {\r\n        System.out.println(\"Open an account with ACME Banking Solutions...\\n\");\r\n        int menu = checkMultipleOptions(\"1. Open a personal account. \\n2. Open a business account. \\n3. Open an ISA Account. \\n9. Exit.\", new int[] {1, 2, 3, 9});\r\n\r\n        switch (menu)\r\n        {\r\n            case 1 -> openPersonalAccount(createUser());\r\n            case 2 -> openBusinessAccount(createUser());\r\n            case 3 -> openISAAccount(createUser());\r\n            case 9 -> exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method openPersonalAccount() takes an int userID as an argument and inserts a row into the Accounts0 table in the database.\r\n    // The information entered into the table is dependent on the user's input and is linked to the userID passed to the method.\r\n    // Finally, the PersonalAccount object's accountMenu() method is called.\r\n    public static void openPersonalAccount(int userID) throws SQLException\r\n    {\r\n        Queries newQuery = new Queries();\r\n        AccountNumberGeneration generator = new AccountNumberGeneration();\r\n        checkCredential(\"Does the customer have a valid personal ID? (Only driving licence or passport permitted.) \\n1. Yes. \\n2. No.\", \"Customer must have valid ID to open a personal account.\");\r\n        checkCredential(\"Does the customer have a valid proof of address? (Utility bill, council letter, etc. permitted.) \\n1. Yes. \\n2. No.\", \"Customer must have a valid proof of address to open a personal account.\");\r\n        float openingBalance = checkFloatRange(\"Enter opening balance: \", 1.00f, 20000.00f);\r\n\r\n        if (checkTwoOptions(\" Confirm account opening? \\n 1. Yes \\n 2. No\"))\r\n        {\r\n            PersonalAccount personalAccount = newQuery.createPersonalAccount(generator.generateAccountNumber(), \"12-20-02\", userID, openingBalance, 0.00f);\r\n            System.out.println(\" Account creation successful.\");\r\n            personalAccount.accountMenu();\r\n        }\r\n        else\r\n        {\r\n            exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method openBusinessAccount() takes an int userID as an argument and inserts a row into the Accounts0 table in the database.\r\n    // The information entered into the table is dependent on the user's input and is linked to the userID passed to the method.\r\n    // Finally, the BusinessAccount object's accountMenu() method is called.\r\n    public static void openBusinessAccount(int userID) throws SQLException\r\n    {\r\n        Queries newQuery = new Queries();\r\n        AccountNumberGeneration generator = new AccountNumberGeneration();\r\n        String businessName = checkAlphabet(\"Enter business name: \");\r\n        checkCredential(\"Does the customer have valid business credentials? \\n1. Yes. \\n2. No.\", \"Customer must have valid business credentials to open a business account\");\r\n        checkCredential(\"Does the customer have a valid business type? (No enterprises, public limited companies or charities are permitted.) \\n1. Yes. \\n2. No.\", \"Customer must have a valid business type to open a business account.\");\r\n        float openingBalance = checkFloatRange(\"Enter opening balance: \", 1.00f, 20000.00f);\r\n        float overdraftAmount = checkFloatRange(\"Enter agreed overdraft amount: \", 0.00f, 10000.00f);\r\n\r\n        if (checkTwoOptions(\"Confirm account opening? \\n1. Yes. \\n2.No\"))\r\n        {\r\n            BusinessAccount businessAccount = newQuery.createBusinessAccount(generator.generateAccountNumber(), \"12-20-02\", userID, openingBalance, overdraftAmount, businessName);\r\n            System.out.println(\"Account creation successful.\");\r\n            createBusiness(businessAccount);\r\n            businessAccount.accountMenu();\r\n        }\r\n        else\r\n        {\r\n            exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method openISAAccount() takes an int userID as an argument and inserts a row into the Accounts0 table in the database.\r\n    // The information entered into the table is dependent on the user's input and is linked to the userID passed to the method.\r\n    // Finally, the ISAAccount object's accountMenu() method is called.\r\n    public static void openISAAccount(int userID) throws SQLException\r\n    {\r\n        Queries newQuery = new Queries();\r\n        AccountNumberGeneration generator = new AccountNumberGeneration();\r\n        checkCredential(\"Does the customer have valid personal ID? (Only driving licence or passport permitted.) \\n1. Yes. \\n2. No.\", \"Customer must have valid ID to open an ISA account.\");\r\n        checkCredential(\"Does the customer meet the age requirements for an ISA account? (16+) \\n1. Yes. \\n2. No.\", \"Customer must meet the age requirements to open an ISA account.\");\r\n        float openingBalance = checkFloatRange(\"Enter opening balance: \", 0.00f, 20000.00f);\r\n\r\n        if (checkTwoOptions(\"Confirm account opening? \\n1. Yes. \\n2. No.\"))\r\n        {\r\n            ISAAccount isaAccount = newQuery.createISAAccount(generator.generateAccountNumber(), \"12-20-02\", userID, openingBalance, 0.00f);\r\n            System.out.println(\"Account creation successful.\");\r\n            isaAccount.accountMenu();\r\n        }\r\n        else\r\n        {\r\n            exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method createUser() prompts the user for information which is then fed to the method createUser() in the Queries class.\r\n    // The result is that a new row is added to the Users0 table in the database.\r\n    // Finally, an integer representing the relevant ID in the Users0 table is returned.\r\n    public static int createUser() throws SQLException\r\n    {\r\n        Queries newQuery = new Queries();\r\n        String firstName = checkAlphabet(\"Enter first name: \");\r\n        String lastName = checkAlphabet(\"Enter last name: \");\r\n        int birthDay = checkIntegerRange(\"Enter birth day: \", 1, 31);\r\n        int birthMonth = checkIntegerRange(\"Enter birth month: \", 1, 12);\r\n        int birthYear = checkIntegerRange(\"Enter birth year: \", 1900, 2007);\r\n        String dateOfBirth = (birthYear + \"-\" + String.format(\"%02d\", birthMonth) + \"-\" + String.format(\"%02d\", birthDay));\r\n        return newQuery.createUser(firstName, lastName, dateOfBirth);\r\n    }\r\n\r\n    // Method createBusiness() takes a BusinessAccount object as its argument and calls the method createBusiness() from the Queries class.\r\n    // The result is that a new row is inserted into the Businesses0 table based on the newly created business account.\r\n    public static void createBusiness(BusinessAccount businessAccount) throws SQLException\r\n    {\r\n        Queries newQuery = new Queries();\r\n        newQuery.createBusiness(businessAccount);\r\n    }\r\n\r\n    // Method checkTwoOptions() takes a String menuString (the sentence to be printed to the console) as an argument and returns a boolean.\r\n    // The boolean returned is based on the comparison between the user's input and the integer 1.\r\n    // This method can be used as a template for any situation in which the user is prompted to choose between two options.\r\n    public static boolean checkTwoOptions(String menuString)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(menuString);\r\n        int input = scanner.nextInt();\r\n\r\n        while (input != 1 && input != 2)\r\n        {\r\n            System.out.println(\"Invalid input. Try again.\");\r\n            input = scanner.nextInt();\r\n        }\r\n\r\n        return (input == 1);\r\n    }\r\n\r\n    // Method checkMultipleOptions() takes a String menuString and an array of integers options as arguments.\r\n    // The options array contains all the numbers which can be selected by the user as options.\r\n    // The user is prompted repeatedly until they enter an integer which is contained in the options array.\r\n    // This integer inputted is finally returned.\r\n    // This method can be used as a template for any situation in which the user is prompted to choose between multiple options.\r\n    public static int checkMultipleOptions(String menuString, int[] options)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(menuString);\r\n        int input = 0;\r\n\r\n        while (true)\r\n        {\r\n            input = scanner.nextInt();\r\n\r\n            for (int option : options)\r\n            {\r\n                if (input == option)\r\n                {\r\n                    return input;\r\n                }\r\n            }\r\n\r\n            System.out.println(\"Invalid input. Try again.\");\r\n        }\r\n    }\r\n\r\n    // Method checkAccountNumber() prompts the user to enter an account number and checks that the number is valid.\r\n    // The account number entered must be the correct length and contain only numbers, or the user is re-prompted.\r\n    // The account number is returned as a String once the user has entered a valid number.\r\n    public static String checkAccountNumber()\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"Enter account number: \");\r\n        String accountNumber = scanner.next();\r\n\r\n        while (accountNumber.length() != 8 && !accountNumber.matches(\"[0-9]+\"))\r\n        {\r\n            System.out.println(\"Invalid input. Try again.\");\r\n            accountNumber = scanner.next();\r\n        }\r\n\r\n        return accountNumber;\r\n    }\r\n\r\n    // Method checkCredential() takes a String menuString and a String exitString as arguments.\r\n    // The user is prompted for an integer repeatedly until 1 or 2 is entered.\r\n    // If the user enters 1 the method passes, while if the user enters 2 the method exitProgram() is called to end the session.\r\n    // This method can be used as a template for any situation in which the user is prompted to verify customer credentials.\r\n    public static void checkCredential(String menuString, String exitString)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(menuString);\r\n        int input = scanner.nextInt();\r\n\r\n        while (input != 1 && input != 2)\r\n        {\r\n            input = scanner.nextInt();\r\n        }\r\n\r\n        if (input == 2)\r\n        {\r\n            System.out.println(exitString);\r\n            exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method checkAlphabet() takes a String menuString as an argument and returns a String based on the user's input.\r\n    // The user is prompted repeatedly until an input of the correct type (only letters) is submitted.\r\n    // This method can be used as a template for any situation in which the user is prompted to enter a name or written response.\r\n    public static String checkAlphabet(String menuString)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        String input = \"-\";\r\n\r\n        while (!input.matches(\"[a-z, A-Z]+\"))\r\n        {\r\n            System.out.println(menuString);\r\n            input = scanner.next();\r\n        }\r\n\r\n        return input;\r\n    }\r\n\r\n    // Method checkIntegerRange takes a String menuString, int lowerBound and int upperBound as arguments.\r\n    // The user is prompted to enter an integer which must fall between the lowerBound and upperBound (inclusive).\r\n    // This method can be used as a template for any situation in which the user is prompted to enter a date.\r\n    public static int checkIntegerRange(String menuString, int lowerBound, int upperBound)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        int input = lowerBound - 1;\r\n\r\n        while (input < lowerBound || input > upperBound)\r\n        {\r\n            System.out.println(menuString);\r\n            input = scanner.nextInt();\r\n        }\r\n\r\n        return input;\r\n    }\r\n\r\n    // Method checkFloatRange takes a String menuString, float lowerBound and float upperBound as arguments.\r\n    // The user is prompted to enter a float which must fall between the lowerBound and upperBound (inclusive).\r\n    // This method can be used as a template for any situation in which the user is prompted to enter a monetary amount.\r\n    public static float checkFloatRange(String menuString, float lowerBound, float upperBound)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        float input = lowerBound - 1.00f;\r\n\r\n        while (input < lowerBound || input > upperBound)\r\n        {\r\n            System.out.println(menuString);\r\n            input = scanner.nextFloat();\r\n        }\r\n\r\n        return input;\r\n    }\r\n\r\n    // Method exitProgram() terminates the program running to end the session when called.\r\n    public static void exitProgram()\r\n    {\r\n        System.out.println(\" Successfully logged out.\");\r\n        System.exit(0);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Program.java b/src/Program.java
--- a/src/Program.java	(revision 667ee9a546168c01468cd1b700b7ccedcc02f60b)
+++ b/src/Program.java	(date 1673290383742)
@@ -3,12 +3,8 @@
  */
 
 //imports
-import javax.xml.crypto.Data;
-import java.sql.PreparedStatement;
 import java.util.ArrayList;
 import java.util.Scanner;
-import java.sql.Connection;
-import java.sql.DriverManager;
 import java.sql.SQLException;
 
 public class Program
@@ -17,7 +13,7 @@
     // The method either calls the existingCustomersMenu() or newCustomersMenu() methods depending on user input.
     public static void main(String[] args) throws SQLException
     {
-        System.out.println("Welcome to ACME Banking Solutions...\n");
+        System.out.println("\nWelcome to ACME Banking Solutions...\n");
         int menu = checkMultipleOptions("Does the customer currently have an account with us? \n1. Yes. \n2. No. \n9. Exit.", new int[]{1, 2, 9});
 
         switch (menu)
@@ -41,20 +37,21 @@
         }
 
         //Retrieve account details.
-        System.out.println("\n Retrieving account details...");
-        Account.retrieveCustomerInfo(accountNumber);
+        System.out.println("\nRetrieving account details...");
+        ArrayList<String> customerInfo = Account.retrieveCustomerInfo(accountNumber);
 
         //Display customer info - NEEDS FIXING TO DISPLAY INDIVIDUAL RESULTS.
-        System.out.println("\n Name: ");
-        System.out.println("\n D.O.B: ");
+        System.out.println("\nName: "+customerInfo.get(0)+" "+customerInfo.get(1));
+        System.out.println("\nD.O.B: "+customerInfo.get(2));
 
         //Display customers accounts with bank - NEEDS FIXING.
-        System.out.println("\n Customer Accounts: ");
+        System.out.println("\nCustomer Accounts: ");
 
-
-        //Option to allow current customer to open new account. - NEEDS REMOVING
-        PersonalAccount x = new PersonalAccount("12312434", "090109", 45.45f, 0.00f, true, true);
-        x.accountMenu();
+        ArrayList<String> accountList = Account.retrieveCustomerAccounts(accountNumber);
+        for (String s: accountList)
+        {
+            System.out.println(s);
+        }
     }
 
     // Method newCustomersMenu() which displays a menu to new customers.
@@ -219,7 +216,7 @@
     public static String checkAccountNumber()
     {
         Scanner scanner = new Scanner(System.in);
-        System.out.println("Enter account number: ");
+        System.out.println("\nEnter account number: ");
         String accountNumber = scanner.next();
 
         while (accountNumber.length() != 8 && !accountNumber.matches("[0-9]+"))
Index: src/Account.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\nAbstract class Account.\r\n */\r\n\r\n\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nabstract class Account\r\n{\r\n    private String accountNumber;\r\n    private String sortCode;\r\n    private float balance;\r\n    private float overdraft;\r\n\r\n\r\n    public Account(String accountNumber, String sortCode, float balance, float overdraft)\r\n    {\r\n        this.accountNumber = accountNumber;\r\n        this.sortCode = sortCode;\r\n        this.balance = balance;\r\n        this.overdraft = overdraft;\r\n    }\r\n\r\n    public static ArrayList retrieveCustomerInfo(String accountNumber) throws SQLException\r\n    {\r\n        ArrayList<String> customerInfo = new ArrayList<>(List.of(\"FirstName\",\"LastName\",\"DateOfBirth\"));\r\n\r\n        Queries newQuery = new Queries(); //Should move to Program? Only one instance needed.\r\n        ArrayList<String> customerInfoResults = newQuery.readQuery(\"SELECT FirstName, LastName, DateOfBirth from Users where ID in (SELECT UserID from Accounts where AccountNumber = \" + accountNumber + \" )\",customerInfo);\r\n\r\n        return customerInfoResults;\r\n    }\r\n\r\n    public static ArrayList retrieveCustomerAccounts(String accountNumber)\r\n    {\r\n        Queries newQuery = new Queries();\r\n        String query = (\"SELECT AccountNumber, AccountType FROM Accounts WHERE UserID in (SELECT UserID FROM Accounts WHERE AccountNumber = \" + accountNumber + \");\");\r\n        return null;\r\n    }\r\n\r\n    public String getAccountNumber()\r\n    {\r\n        return accountNumber;\r\n    }\r\n\r\n    public String getSortCode()\r\n    {\r\n        return sortCode;\r\n    }\r\n\r\n    public float getBalance()\r\n    {\r\n        return balance;\r\n    }\r\n\r\n    public void setBalance(float balance)\r\n    {\r\n        this.balance = balance;\r\n    }\r\n\r\n    // Function deposit which calls getBalance and setBalance to increment balance\r\n    public void deposit(float increment) throws SQLException\r\n    {\r\n        float newBalance = getBalance() + increment;\r\n        setBalance(newBalance);\r\n        this.updateDatabaseInformation();\r\n    }\r\n\r\n    // Function withdraw which calls getBalance and setBalance to decrement balance\r\n    public void withdraw(float decrement) throws SQLException\r\n    {\r\n        float newBalance = getBalance() - decrement;\r\n        setBalance(newBalance);\r\n        this.updateDatabaseInformation();\r\n    }\r\n\r\n    // Function transfer which takes two accounts and an amount as an argument and transfers money between the two\r\n\r\n    public void transfer(float amount, Account payee, Account recipient)\r\n    {\r\n\r\n    }\r\n\r\n\r\n    // Abstract method to display menu system for account.\r\n    abstract void accountMenu();\r\n\r\n    //Abstract methods for creating accounts should use \"override\" in child classes for each type of account.\r\n    // (Note Are these methods abstract as a result of class being abstract?)\r\n\r\n    public void generateSortCode(){}\r\n\r\n    //accidental duplicate\r\n    public void createAccount(){}\r\n\r\n    //Method which updates the database so that changes made to the Account object are reflected in the relevant table\r\n    //In other words the method synchronizes the program with the database\r\n    public void updateDatabaseInformation() throws SQLException\r\n    {\r\n        Queries newQuery = new Queries();\r\n        newQuery.updateQuery(\"UPDATE Accounts SET Balance = \" + balance + \", Overdraft = \" + overdraft + \"WHERE AccountNumber = \" + accountNumber + \";\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Account.java b/src/Account.java
--- a/src/Account.java	(revision 667ee9a546168c01468cd1b700b7ccedcc02f60b)
+++ b/src/Account.java	(date 1673290733550)
@@ -2,7 +2,7 @@
 Abstract class Account.
  */
 
-
+//Imports
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
@@ -33,11 +33,23 @@
         return customerInfoResults;
     }
 
-    public static ArrayList retrieveCustomerAccounts(String accountNumber)
-    {
+    public static ArrayList retrieveCustomerAccounts(String accountNumber) throws SQLException {
         Queries newQuery = new Queries();
         String query = ("SELECT AccountNumber, AccountType FROM Accounts WHERE UserID in (SELECT UserID FROM Accounts WHERE AccountNumber = " + accountNumber + ");");
-        return null;
+
+        DatabaseConnection connection = new DatabaseConnection();
+
+        var stmt = connection.getConnection().prepareStatement(query);
+        var rs = stmt.executeQuery();
+
+        ArrayList<String> accountList = new ArrayList<>();
+        int count = 0;
+
+        while(rs.next()){
+            count = count+1;
+            accountList.add(count + ". " + rs.getString(1).toString() + " " + rs.getString(2).toString());
+        }
+        return accountList;
     }
 
     public String getAccountNumber()
Index: src/Queries.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//Separate class for all queries which need to be executed before an instance of an Account is created\r\n//For example cannot call functions inside of Account, BusinessAccount etc. until a query made is made to create an instance\r\n//Also separates the queries from the connection itself which looks more tidy I think\r\n\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Queries\r\n{\r\n    public ArrayList<String> accountsColumns = new ArrayList<>(List.of(\"AccountNumber\", \"SortCode\", \"UserID\", \"AccountType\", \"Balance\", \"Overdraft\"));\r\n    public ArrayList<String> usersColumns = new ArrayList<>(List.of(\"ID\", \"FirstName\", \"LastName\", \"DateOfBirth\"));\r\n    public ArrayList<String> businessesColumns = new ArrayList<>(List.of(\"ID\", \"Name\", \"AccountNumber\"));\r\n\r\n    //Method which runs update queries on the database\r\n    public static void updateQuery(String query) throws SQLException\r\n    {\r\n        try\r\n        {\r\n            DatabaseConnection connection = new DatabaseConnection();\r\n\r\n            var stmt = connection.getConnection().prepareStatement(query);\r\n            stmt.executeQuery();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    //Method which runs read queries on the database\r\n    //Returns results an ArrayList of strings which contain the results from the table\r\n    //If connection fails null is returned\r\n    public static ArrayList<String> readQuery(String query, ArrayList columnNames) throws SQLException\r\n    {\r\n        ArrayList<String> results = new ArrayList<>();\r\n        try\r\n        {\r\n            DatabaseConnection connection = new DatabaseConnection();\r\n\r\n            var stmt = connection.getConnection().prepareStatement(query);\r\n            var rs = stmt.executeQuery();\r\n\r\n            while (rs.next())\r\n            {\r\n                for (int i = 0; i < columnNames.size(); i++)\r\n                {\r\n                    results.add(rs.getString(columnNames.get(i).toString()));\r\n                }\r\n            }\r\n\r\n            return results;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n        return results;\r\n    }\r\n\r\n    // Method queries database to check if an account number exists in database. Returns true if account exists and false otherwise. -CHECK IF CAN USE PREEXISTING METHOD.\r\n    public Boolean checkAccountExists(String AccountNumber)\r\n    {\r\n        DatabaseConnection connection = new DatabaseConnection();\r\n        Boolean accountExists=null;\r\n        String query = \"select COUNT(1) from Accounts0 where AccountNumber = '\" + AccountNumber + \"';\";\r\n\r\n        try\r\n        {\r\n            var stmt = connection.getConnection().prepareStatement(query);\r\n            var rs = stmt.executeQuery();\r\n\r\n            while (rs.next())\r\n            {\r\n                if (rs.getInt(1) == 1)\r\n                {\r\n                    //System.out.println(\"Account Number already exists in database\");\r\n                    accountExists = true;\r\n\r\n                }\r\n                else\r\n                {\r\n                    //System.out.println(\"Account Number does not exist in database.\");\r\n                    accountExists = false;\r\n                }\r\n            }\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n        return accountExists;\r\n    }\r\n\r\n    //Method takes the account number provided and creates a PersonalAccount object using information from the database\r\n    public PersonalAccount retrievePersonalAccount(String accountNumber) throws SQLException\r\n    {\r\n        ArrayList<String> accountInformation;\r\n        accountInformation = this.readQuery(\"SELECT * FROM Accounts0 WHERE AccountNumber = '\" + accountNumber + \"';\", accountsColumns);\r\n        PersonalAccount personalAccount = new PersonalAccount(accountInformation.get(0), accountInformation.get(1), Float.parseFloat(accountInformation.get(4)), Float.parseFloat(accountInformation.get(5)), true, true);\r\n        return personalAccount;\r\n    }\r\n\r\n    //Method takes the account number provided and creates an ISAAccount object using information from the database\r\n    public ISAAccount retrieveISAAccount(String accountNumber) throws SQLException\r\n    {\r\n        ArrayList<String> accountInformation;\r\n        accountInformation = this.readQuery(\"SELECT * FROM Accounts0 WHERE AccountNumber = '\" + accountNumber + \"';\", accountsColumns);\r\n        ISAAccount isaAccount = new ISAAccount(accountInformation.get(0), accountInformation.get(1), Float.parseFloat(accountInformation.get(4)), Float.parseFloat(accountInformation.get(5)));\r\n        return isaAccount;\r\n    }\r\n\r\n    //Method takes the account number provided and creates a BusinessAccount object using information from the database\r\n    public BusinessAccount retrieveBusinessAccount(String accountNumber) throws SQLException\r\n    {\r\n        ArrayList<String> accountInformation;\r\n        accountInformation = this.readQuery(\"SELECT * FROM Accounts0 WHERE AccountNumber = '\" + accountNumber + \"';\", accountsColumns);\r\n        BusinessAccount businessAccount = new BusinessAccount(accountInformation.get(0), accountInformation.get(1), Float.parseFloat(accountInformation.get(4)), Float.parseFloat(accountInformation.get(5)), retrieveBusinessName(accountNumber));\r\n        return businessAccount;\r\n    }\r\n\r\n    public String retrieveBusinessName(String accountNumber) throws SQLException\r\n    {\r\n        ArrayList<String> businessInformation;\r\n        businessInformation = this.readQuery(\"SELECT * FROM Businesses0 WHERE AccountNumber = '\" + accountNumber + \"';\", businessesColumns);\r\n        String businessName = businessInformation.get(1);\r\n        return businessName;\r\n    }\r\n\r\n    //Method takes the name and date of birth of a person, creates a user in the Users table, and returns the UserID of that user\r\n    //This UserID can then be used as an argument for the createAccount method\r\n    public int createUser(String firstName, String lastName, String dateOfBirth) throws SQLException\r\n    {\r\n        this.updateQuery(\"INSERT INTO Users0 (FirstName, LastName, DateOfBirth) VALUES ('\" + firstName + \"', '\" + lastName + \"', '\" + dateOfBirth + \"');\");\r\n        ArrayList<String> userInformation = this.readQuery(\"SELECT * FROM Users0 WHERE (FirstName = '\" + firstName + \"' AND LastName = '\" + lastName + \"' AND DateOfBirth = '\" + dateOfBirth + \"');\", usersColumns);\r\n        int userID = Integer.parseInt(userInformation.get(0));\r\n        return userID;\r\n    }\r\n\r\n    //Method takes a created BusinessAccount and uses it to create a new business in the Businesses table\r\n    public void createBusiness(BusinessAccount account) throws SQLException\r\n    {\r\n        this.updateQuery(\"INSERT INTO Businesses0 (Name, AccountNumber) VALUES ('\" + account.getName() + \"', '\" + account.getAccountNumber() + \"');\");\r\n    }\r\n\r\n    //Method takes the relevant information and creates a personal account, before returning the account itself as an object\r\n    public PersonalAccount createPersonalAccount(String accountNumber, String sortCode, int userID, float balance, float overdraft) throws SQLException\r\n    {\r\n        this.updateQuery(\"INSERT INTO Accounts0 VALUES ('\" + accountNumber + \"', '\" + sortCode + \"', '\" + userID + \"', '\" + \"Personal\" + \"', \" + balance + \", \" + overdraft + \");\");\r\n        PersonalAccount personalAccount = retrievePersonalAccount(accountNumber);\r\n        return personalAccount;\r\n    }\r\n\r\n    //Method takes the relevant information and creates an ISA account, before returning the account itself as an object\r\n    public ISAAccount createISAAccount(String accountNumber, String sortCode, int userID, float balance, float overdraft) throws SQLException\r\n    {\r\n        this.updateQuery(\"INSERT INTO Accounts0 VALUES ('\" + accountNumber + \"', '\" + sortCode + \"', \" + userID + \", '\" + \"ISA\" + \"', \" + balance + \", \" + overdraft + \");\");\r\n        ISAAccount isaAccount = retrieveISAAccount(accountNumber);\r\n        return isaAccount;\r\n    }\r\n\r\n    //Method takes the relevant information and creates a business account, before returning the account itself as an object\r\n    public BusinessAccount createBusinessAccount(String accountNumber, String sortCode, int userID, float balance, float overdraft, String businessName) throws SQLException\r\n    {\r\n        this.updateQuery(\"INSERT INTO Accounts0 VALUES ('\" + accountNumber + \"', '\" + sortCode + \"', \" + userID + \", '\" + \"Business\" + \"', \" + balance + \", \" + overdraft + \");\");\r\n        BusinessAccount businessAccount = retrieveBusinessAccount(accountNumber);\r\n        return businessAccount;\r\n    }\r\n\r\n    //Method takes an accountNumber String, and deletes the relevant entry from the Accounts table\r\n    public void deleteAccount(String accountNumber) throws SQLException\r\n    {\r\n        this.updateQuery(\"DELETE FROM Accounts0 WHERE AccountNumber = '\" + accountNumber + \"';\");\r\n    }\r\n\r\n    //Method takes a userID integer and deletes the relevant entry from the Users table\r\n    public void deleteUser(int userID) throws SQLException\r\n    {\r\n        this.updateQuery(\"DELETE FROM Users0 WHERE UserID = \" + userID + \";\");\r\n    }\r\n\r\n    //Method takes a businessID integer and deletes the relevant entry from the Businesses table\r\n    public void deleteBusiness(int businessID) throws SQLException\r\n    {\r\n        this.updateQuery(\"DELETE FROM Businesses0 WHERE ID = \" + businessID + \";\");\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Queries.java b/src/Queries.java
--- a/src/Queries.java	(revision 667ee9a546168c01468cd1b700b7ccedcc02f60b)
+++ b/src/Queries.java	(date 1673284036978)
@@ -65,19 +65,16 @@
         DatabaseConnection connection = new DatabaseConnection();
         Boolean accountExists=null;
         String query = "select COUNT(1) from Accounts0 where AccountNumber = '" + AccountNumber + "';";
-
         try
         {
             var stmt = connection.getConnection().prepareStatement(query);
             var rs = stmt.executeQuery();
-
             while (rs.next())
             {
                 if (rs.getInt(1) == 1)
                 {
                     //System.out.println("Account Number already exists in database");
                     accountExists = true;
-
                 }
                 else
                 {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"ff4c1b09-c4a5-42c9-9134-c7e38c5d977e\" name=\"Changes\" comment=\"bug fixes.\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"e56f4684-27dc-4235-a5c5-dd35980a8d2e\" />\r\n        <option name=\"url\" value=\"https://github.com/JoshNarindra/Banking_Application.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2JSL54fu2ktI1BDk3LOo7HV2SQx\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,\r\n    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/joshu/IdeaProjects/JavaFXLogin&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"ff4c1b09-c4a5-42c9-9134-c7e38c5d977e\" name=\"Changes\" comment=\"\" />\r\n      <created>1672066355779</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1672066355779</updated>\r\n      <workItem from=\"1672066358101\" duration=\"5246000\" />\r\n      <workItem from=\"1672103908147\" duration=\"60000\" />\r\n      <workItem from=\"1672104969952\" duration=\"121000\" />\r\n      <workItem from=\"1672148124721\" duration=\"7995000\" />\r\n      <workItem from=\"1672228202568\" duration=\"2578000\" />\r\n      <workItem from=\"1672266508408\" duration=\"6787000\" />\r\n      <workItem from=\"1672583152802\" duration=\"8536000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Initial Class Layout.\">\r\n      <created>1672148787123</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672148787123</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Basic Menu Framework\">\r\n      <created>1672186553273</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672186553273</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Added Menu Framework\">\r\n      <created>1672188041041</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672188041041</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"workspace update\">\r\n      <created>1672188070384</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672188070384</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Minor update.\">\r\n      <created>1672188825949</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672188825949</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Minor update.\">\r\n      <created>1672189009523</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672189009523</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Added abstract methods for account creation.\">\r\n      <created>1672229169763</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672229169763</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Added abstract methods for account creation.\">\r\n      <created>1672229245986</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672229245986</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Added comments. fixed minor bugs\">\r\n      <created>1672230776747</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672230776747</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Minor layout changes\">\r\n      <created>1672267689678</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672267689678</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"File name change\">\r\n      <created>1672268217286</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672268217286</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\".\">\r\n      <created>1672268239343</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672268239343</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Added Menu System to Personal Acc.\">\r\n      <created>1672326525155</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672326525155</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Updated Menu System to Personal Acc.\">\r\n      <created>1672327260299</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672327260299</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Updated Menu System to Personal Acc.\">\r\n      <created>1672327397920</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672327397920</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"accountMenu() method added to children of account class.\">\r\n      <created>1672327998633</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672327998633</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Added DatabaseConnection Class.\">\r\n      <created>1672420460300</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672420460300</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Added DatabaseConnection Class.\">\r\n      <created>1672420487889</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672420487889</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Updated accounts menus.\">\r\n      <created>1672605561203</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672605561204</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Updated accounts menus.\">\r\n      <created>1672606443775</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672606443775</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Updated accounts menus.\">\r\n      <created>1672606774637</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672606774637</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"Added name and DOB variables.\">\r\n      <created>1672606831283</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672606831283</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Added constructor for user class.\">\r\n      <created>1672606965811</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672606965811</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Added constructor for user class.\">\r\n      <created>1672674813823</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672674813823</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Database Connection update.\">\r\n      <created>1672680270871</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672680270871</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Database Connection update.\">\r\n      <created>1672680291715</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672680291715</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"getConnection can now run queries\">\r\n      <created>1672684223142</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672684223142</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Database Connection Class update.\">\r\n      <created>1672685227562</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672685227562</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Database Connection Class update.\">\r\n      <created>1672685934261</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672685934261</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"Database Connection Class update.\">\r\n      <created>1672687214597</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672687214597</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"bug fixes.\">\r\n      <created>1672957725729</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672957725729</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"bug fixes.\">\r\n      <created>1672957737643</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672957737643</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"bug fixes.\">\r\n      <created>1672961668273</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672961668273</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"bug fixes.\">\r\n      <created>1672961677706</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1672961677706</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"35\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Initial Class Layout.\" />\r\n    <MESSAGE value=\"Basic Menu Framework\" />\r\n    <MESSAGE value=\"Added Menu Framework\" />\r\n    <MESSAGE value=\"workspace update\" />\r\n    <MESSAGE value=\"Minor update.\" />\r\n    <MESSAGE value=\"Added abstract methods for account creation.\" />\r\n    <MESSAGE value=\"Added comments. fixed minor bugs\" />\r\n    <MESSAGE value=\"Minor layout changes\" />\r\n    <MESSAGE value=\"File name change\" />\r\n    <MESSAGE value=\".\" />\r\n    <MESSAGE value=\"Added Menu System to Personal Acc.\" />\r\n    <MESSAGE value=\"Updated Menu System to Personal Acc.\" />\r\n    <MESSAGE value=\"accountMenu() method added to children of account class.\" />\r\n    <MESSAGE value=\"Added DatabaseConnection Class.\" />\r\n    <MESSAGE value=\"Updated accounts menus.\" />\r\n    <MESSAGE value=\"Added name and DOB variables.\" />\r\n    <MESSAGE value=\"Added constructor for user class.\" />\r\n    <MESSAGE value=\"Fixed connection bug.\" />\r\n    <MESSAGE value=\"Database Connection update.\" />\r\n    <MESSAGE value=\"getConnection can now run queries\" />\r\n    <MESSAGE value=\"Database Connection Class update.\" />\r\n    <MESSAGE value=\"bug fixes.\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"bug fixes.\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/Queries.java</url>\r\n          <line>55</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 667ee9a546168c01468cd1b700b7ccedcc02f60b)
+++ b/.idea/workspace.xml	(date 1673284037657)
@@ -4,7 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="ff4c1b09-c4a5-42c9-9134-c7e38c5d977e" name="Changes" comment="bug fixes." />
+    <list default="true" id="ff4c1b09-c4a5-42c9-9134-c7e38c5d977e" name="Changes" comment="bug fixes.">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_01_2023_23_37__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_01_2023_23_37__Changes_.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Account.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Account.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Program.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Program.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Queries.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Queries.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -317,11 +323,29 @@
       <option name="project" value="LOCAL" />
       <updated>1672961677706</updated>
     </task>
-    <option name="localTasksCounter" value="35" />
+    <task id="LOCAL-00035" summary="bug fixes.">
+      <created>1673283047652</created>
+      <option name="number" value="00035" />
+      <option name="presentableId" value="LOCAL-00035" />
+      <option name="project" value="LOCAL" />
+      <updated>1673283047652</updated>
+    </task>
+    <option name="localTasksCounter" value="36" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="Initial Class Layout." />
@@ -348,15 +372,4 @@
     <MESSAGE value="bug fixes." />
     <option name="LAST_COMMIT_MESSAGE" value="bug fixes." />
   </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/src/Queries.java</url>
-          <line>55</line>
-          <option name="timeStamp" value="1" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
-  </component>
 </project>
\ No newline at end of file
