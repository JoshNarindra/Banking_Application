Index: src/Program.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\nMain Program Class.\r\n */\r\n\r\n//imports\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\nimport java.sql.SQLException;\r\n\r\npublic class Program\r\n{\r\n    // Method main() which displays the opening menu to the user.\r\n    // The method either calls the existingCustomersMenu() or newCustomersMenu() methods depending on user input.\r\n    public static void main(String[] args) throws SQLException\r\n    {\r\n        System.out.println(\"\\nWelcome to ACME Banking Solutions...\\n\");\r\n        int menu = checkMultipleOptions(\"Does the customer currently have an account with us? \\n1. Yes. \\n2. No. \\n9. Exit.\", new int[]{1, 2, 9});\r\n\r\n        switch (menu)\r\n        {\r\n            case 1 -> existingCustomersMenu();\r\n            case 2 -> newCustomersMenu();\r\n            case 9 -> exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method existingCustomersMenu() which displays a menu to customers who already have an account registered.\r\n    public static void existingCustomersMenu() throws SQLException\r\n    {\r\n        Queries queries = new Queries();\r\n        String accountNumber = checkAccountNumber();\r\n\r\n        while(!queries.checkAccountExists(accountNumber))\r\n        {\r\n            System.out.println(\"No record of account. Try again.\");\r\n            accountNumber = checkAccountNumber();\r\n        }\r\n\r\n        //Retrieve account details.\r\n        System.out.println(\"\\nRetrieving account details...\");\r\n        ArrayList<String> customerInfo = Account.retrieveCustomerInfo(accountNumber);\r\n\r\n        //Display customer info - NEEDS FIXING TO DISPLAY INDIVIDUAL RESULTS.\r\n        System.out.println(\"\\nName: \"+customerInfo.get(0)+\" \"+customerInfo.get(1));\r\n        System.out.println(\"D.O.B: \"+customerInfo.get(2));\r\n\r\n        //Display customers accounts with bank - NEEDS FIXING.\r\n        System.out.println(\"\\nCustomer Accounts: \");\r\n\r\n        ArrayList<String> accountList = Account.retrieveCustomerAccounts(accountNumber);\r\n        for (String s: accountList)\r\n        {\r\n            System.out.println(s);\r\n        }\r\n\r\n        System.out.println(\"\\nEnter the account number of the account that would you like to access:\");\r\n\r\n\r\n    }\r\n\r\n    // Method newCustomersMenu() which displays a menu to new customers.\r\n    // The method calls the createUser() method and passes its return value to one of the methods which creates a new account, depending on user input.\r\n    public static void newCustomersMenu() throws SQLException\r\n    {\r\n        System.out.println(\"Open an account with ACME Banking Solutions...\\n\");\r\n        int menu = checkMultipleOptions(\"1. Open a personal account. \\n2. Open a business account. \\n3. Open an ISA Account. \\n9. Exit.\", new int[] {1, 2, 3, 9});\r\n\r\n        switch (menu)\r\n        {\r\n            case 1 -> openPersonalAccount(createUser());\r\n            case 2 -> openBusinessAccount(createUser());\r\n            case 3 -> openISAAccount(createUser());\r\n            case 9 -> exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method openPersonalAccount() takes an int userID as an argument and inserts a row into the Accounts0 table in the database.\r\n    // The information entered into the table is dependent on the user's input and is linked to the userID passed to the method.\r\n    // Finally, the PersonalAccount object's accountMenu() method is called.\r\n    public static void openPersonalAccount(int userID) throws SQLException\r\n    {\r\n        Queries newQuery = new Queries();\r\n        AccountNumberGeneration generator = new AccountNumberGeneration();\r\n        checkCredential(\"Does the customer have a valid personal ID? (Only driving licence or passport permitted.) \\n1. Yes. \\n2. No.\", \"Customer must have valid ID to open a personal account.\");\r\n        checkCredential(\"Does the customer have a valid proof of address? (Utility bill, council letter, etc. permitted.) \\n1. Yes. \\n2. No.\", \"Customer must have a valid proof of address to open a personal account.\");\r\n        float openingBalance = checkFloatRange(\"Enter opening balance: \", 1.00f, 20000.00f);\r\n\r\n        if (checkTwoOptions(\" Confirm account opening? \\n 1. Yes \\n 2. No\"))\r\n        {\r\n            PersonalAccount personalAccount = newQuery.createPersonalAccount(generator.generateAccountNumber(), \"12-20-02\", userID, openingBalance, 0.00f);\r\n            System.out.println(\" Account creation successful.\");\r\n            personalAccount.accountMenu();\r\n        }\r\n        else\r\n        {\r\n            exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method openBusinessAccount() takes an int userID as an argument and inserts a row into the Accounts0 table in the database.\r\n    // The information entered into the table is dependent on the user's input and is linked to the userID passed to the method.\r\n    // Finally, the BusinessAccount object's accountMenu() method is called.\r\n    public static void openBusinessAccount(int userID) throws SQLException\r\n    {\r\n        Queries newQuery = new Queries();\r\n        AccountNumberGeneration generator = new AccountNumberGeneration();\r\n        String businessName = checkAlphabet(\"Enter business name: \");\r\n        checkCredential(\"Does the customer have valid business credentials? \\n1. Yes. \\n2. No.\", \"Customer must have valid business credentials to open a business account\");\r\n        checkCredential(\"Does the customer have a valid business type? (No enterprises, public limited companies or charities are permitted.) \\n1. Yes. \\n2. No.\", \"Customer must have a valid business type to open a business account.\");\r\n        float openingBalance = checkFloatRange(\"Enter opening balance: \", 1.00f, 20000.00f);\r\n        float overdraftAmount = checkFloatRange(\"Enter agreed overdraft amount: \", 0.00f, 10000.00f);\r\n\r\n        if (checkTwoOptions(\"Confirm account opening? \\n1. Yes. \\n2.No\"))\r\n        {\r\n            BusinessAccount businessAccount = newQuery.createBusinessAccount(generator.generateAccountNumber(), \"12-20-02\", userID, openingBalance, overdraftAmount, businessName);\r\n            System.out.println(\"Account creation successful.\");\r\n            createBusiness(businessAccount);\r\n            businessAccount.accountMenu();\r\n        }\r\n        else\r\n        {\r\n            exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method openISAAccount() takes an int userID as an argument and inserts a row into the Accounts0 table in the database.\r\n    // The information entered into the table is dependent on the user's input and is linked to the userID passed to the method.\r\n    // Finally, the ISAAccount object's accountMenu() method is called.\r\n    public static void openISAAccount(int userID) throws SQLException\r\n    {\r\n        Queries newQuery = new Queries();\r\n        AccountNumberGeneration generator = new AccountNumberGeneration();\r\n        checkCredential(\"Does the customer have valid personal ID? (Only driving licence or passport permitted.) \\n1. Yes. \\n2. No.\", \"Customer must have valid ID to open an ISA account.\");\r\n        checkCredential(\"Does the customer meet the age requirements for an ISA account? (16+) \\n1. Yes. \\n2. No.\", \"Customer must meet the age requirements to open an ISA account.\");\r\n        float openingBalance = checkFloatRange(\"Enter opening balance: \", 0.00f, 20000.00f);\r\n\r\n        if (checkTwoOptions(\"Confirm account opening? \\n1. Yes. \\n2. No.\"))\r\n        {\r\n            ISAAccount isaAccount = newQuery.createISAAccount(generator.generateAccountNumber(), \"12-20-02\", userID, openingBalance, 0.00f);\r\n            System.out.println(\"Account creation successful.\");\r\n            isaAccount.accountMenu();\r\n        }\r\n        else\r\n        {\r\n            exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method createUser() prompts the user for information which is then fed to the method createUser() in the Queries class.\r\n    // The result is that a new row is added to the Users0 table in the database.\r\n    // Finally, an integer representing the relevant ID in the Users0 table is returned.\r\n    public static int createUser() throws SQLException\r\n    {\r\n        Queries newQuery = new Queries();\r\n        String firstName = checkAlphabet(\"Enter first name: \");\r\n        String lastName = checkAlphabet(\"Enter last name: \");\r\n        int birthDay = checkIntegerRange(\"Enter birth day: \", 1, 31);\r\n        int birthMonth = checkIntegerRange(\"Enter birth month: \", 1, 12);\r\n        int birthYear = checkIntegerRange(\"Enter birth year: \", 1900, 2007);\r\n        String dateOfBirth = (birthYear + \"-\" + String.format(\"%02d\", birthMonth) + \"-\" + String.format(\"%02d\", birthDay));\r\n        return newQuery.createUser(firstName, lastName, dateOfBirth);\r\n    }\r\n\r\n    // Method createBusiness() takes a BusinessAccount object as its argument and calls the method createBusiness() from the Queries class.\r\n    // The result is that a new row is inserted into the Businesses0 table based on the newly created business account.\r\n    public static void createBusiness(BusinessAccount businessAccount) throws SQLException\r\n    {\r\n        Queries newQuery = new Queries();\r\n        newQuery.createBusiness(businessAccount);\r\n    }\r\n\r\n    // Method checkTwoOptions() takes a String menuString (the sentence to be printed to the console) as an argument and returns a boolean.\r\n    // The boolean returned is based on the comparison between the user's input and the integer 1.\r\n    // This method can be used as a template for any situation in which the user is prompted to choose between two options.\r\n    public static boolean checkTwoOptions(String menuString)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(menuString);\r\n        int input = scanner.nextInt();\r\n\r\n        while (input != 1 && input != 2)\r\n        {\r\n            System.out.println(\"Invalid input. Try again.\");\r\n            input = scanner.nextInt();\r\n        }\r\n\r\n        return (input == 1);\r\n    }\r\n\r\n    // Method checkMultipleOptions() takes a String menuString and an array of integers options as arguments.\r\n    // The options array contains all the numbers which can be selected by the user as options.\r\n    // The user is prompted repeatedly until they enter an integer which is contained in the options array.\r\n    // This integer inputted is finally returned.\r\n    // This method can be used as a template for any situation in which the user is prompted to choose between multiple options.\r\n    public static int checkMultipleOptions(String menuString, int[] options)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(menuString);\r\n        int input = 0;\r\n\r\n        while (true)\r\n        {\r\n            input = scanner.nextInt();\r\n\r\n            for (int option : options)\r\n            {\r\n                if (input == option)\r\n                {\r\n                    return input;\r\n                }\r\n            }\r\n\r\n            System.out.println(\"Invalid input. Try again.\");\r\n        }\r\n    }\r\n\r\n    // Method checkAccountNumber() prompts the user to enter an account number and checks that the number is valid.\r\n    // The account number entered must be the correct length and contain only numbers, or the user is re-prompted.\r\n    // The account number is returned as a String once the user has entered a valid number.\r\n    public static String checkAccountNumber()\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(\"\\nEnter account number: \");\r\n        String accountNumber = scanner.next();\r\n\r\n        while (accountNumber.length() != 8 && !accountNumber.matches(\"[0-9]+\"))\r\n        {\r\n            System.out.println(\"Invalid input. Try again.\");\r\n            accountNumber = scanner.next();\r\n        }\r\n\r\n        return accountNumber;\r\n    }\r\n\r\n    // Method checkCredential() takes a String menuString and a String exitString as arguments.\r\n    // The user is prompted for an integer repeatedly until 1 or 2 is entered.\r\n    // If the user enters 1 the method passes, while if the user enters 2 the method exitProgram() is called to end the session.\r\n    // This method can be used as a template for any situation in which the user is prompted to verify customer credentials.\r\n    public static void checkCredential(String menuString, String exitString)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        System.out.println(menuString);\r\n        int input = scanner.nextInt();\r\n\r\n        while (input != 1 && input != 2)\r\n        {\r\n            input = scanner.nextInt();\r\n        }\r\n\r\n        if (input == 2)\r\n        {\r\n            System.out.println(exitString);\r\n            exitProgram();\r\n        }\r\n    }\r\n\r\n    // Method checkAlphabet() takes a String menuString as an argument and returns a String based on the user's input.\r\n    // The user is prompted repeatedly until an input of the correct type (only letters) is submitted.\r\n    // This method can be used as a template for any situation in which the user is prompted to enter a name or written response.\r\n    public static String checkAlphabet(String menuString)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        String input = \"-\";\r\n\r\n        while (!input.matches(\"[a-z, A-Z]+\"))\r\n        {\r\n            System.out.println(menuString);\r\n            input = scanner.next();\r\n        }\r\n\r\n        return input;\r\n    }\r\n\r\n    // Method checkIntegerRange takes a String menuString, int lowerBound and int upperBound as arguments.\r\n    // The user is prompted to enter an integer which must fall between the lowerBound and upperBound (inclusive).\r\n    // This method can be used as a template for any situation in which the user is prompted to enter a date.\r\n    public static int checkIntegerRange(String menuString, int lowerBound, int upperBound)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        int input = lowerBound - 1;\r\n\r\n        while (input < lowerBound || input > upperBound)\r\n        {\r\n            System.out.println(menuString);\r\n            input = scanner.nextInt();\r\n        }\r\n\r\n        return input;\r\n    }\r\n\r\n    // Method checkFloatRange takes a String menuString, float lowerBound and float upperBound as arguments.\r\n    // The user is prompted to enter a float which must fall between the lowerBound and upperBound (inclusive).\r\n    // This method can be used as a template for any situation in which the user is prompted to enter a monetary amount.\r\n    public static float checkFloatRange(String menuString, float lowerBound, float upperBound)\r\n    {\r\n        Scanner scanner = new Scanner(System.in);\r\n        float input = lowerBound - 1.00f;\r\n\r\n        while (input < lowerBound || input > upperBound)\r\n        {\r\n            System.out.println(menuString);\r\n            input = scanner.nextFloat();\r\n        }\r\n\r\n        return input;\r\n    }\r\n\r\n    // Method exitProgram() terminates the program running to end the session when called.\r\n    public static void exitProgram()\r\n    {\r\n        System.out.println(\" Successfully logged out.\");\r\n        System.exit(0);\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Program.java b/src/Program.java
--- a/src/Program.java	(revision f43b1ec61874403841ba283ed3a98546f8f69b3a)
+++ b/src/Program.java	(date 1673372339833)
@@ -47,6 +47,7 @@
         //Display customers accounts with bank - NEEDS FIXING.
         System.out.println("\nCustomer Accounts: ");
 
+
         ArrayList<String> accountList = Account.retrieveCustomerAccounts(accountNumber);
         for (String s: accountList)
         {
